{
  "SemanticMemory": {
    // Storage configuration
    // "AzureBlobs" or "SimpleFileStorage"
    "ContentStorageType": "SimpleFileStorage",
    // AI service configuration
    // "AzureOpenAIText" or "OpenAI"
    "TextGeneratorType": "AzureOpenAIText",
    // Image OCR configuration
    // "None" or "AzureFormRecognizer" or "Tesseract"
    "ImageOcrType": "None",
    // Data ingestion pipelines configuration.
    "DataIngestion": {
      // - InProcess: in process .NET orchestrator, synchronous/no queues
      // - Distributed: asynchronous queue based orchestrator
      "OrchestrationType": "Distributed",
      "DistributedOrchestration": {
        // "AzureQueue", "RabbitMQ", "SimpleQueues"
        "QueueType": "SimpleQueues"
      },
      // Multiple generators can be used, e.g. for data migration, A/B testing, etc.
      "EmbeddingGeneratorTypes": [
        "AzureOpenAIEmbedding"
      ],
      // Vectors can be written to multiple storages, e.g. for data migration, A/B testing, etc.
      "VectorDbTypes": [
        "SimpleVectorDb"
      ]
    },
    "Retrieval": {
      // "AzureCognitiveSearch" or "Qdrant"
      "VectorDbType": "SimpleVectorDb",
      // "AzureOpenAIEmbedding" or "OpenAI"
      "EmbeddingGeneratorType": "AzureOpenAIEmbedding"
    },
    "Services": {
      "SimpleFileStorage": {
        "Directory": "tmp-cache"
      },
      "SimpleQueues": {
        "Directory": "tmp-queues"
      },
      "SimpleVectorDb": {
        "Directory": "tmp-database"
      },
      "AzureBlobs": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureBlobConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ConnectionString",
        // Azure Storage account name, required when using AzureIdentity auth
        //"Account": "", // dotnet user-secrets set "SemanticMemory:Services:AzureBlobs:Account" "MY_AZUREBLOB_ACCOUNT"
        // Container where to create directories and upload files
        "Container": "memorypipeline",
        // Required when Auth == ConnectionString
        // "ConnectionString": "", // dotnet user-secrets set "SemanticMemory:Services:AzureBlobs:ConnectionString" "MY_AZUREBLOB_CONNECTIONSTRING"
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "AzureQueue": {
        // "ConnectionString" or "AzureIdentity". For other options see <AzureQueueConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ConnectionString",
        // Azure Storage account name, required when using AzureIdentity auth
        //"Account": "", // dotnet user-secrets set "SemanticMemory:Services:AzureQueue:Account" "MY_AZUREQUEUE_ACCOUNT"
        // Required when Auth == ConnectionString
        // "ConnectionString": "", // dotnet user-secrets set "SemanticMemory:Services:AzureQueue:ConnectionString" "MY_AZUREQUEUE_CONNECTIONSTRING"
        // Setting used only for country clouds
        "EndpointSuffix": "core.windows.net"
      },
      "RabbitMq": {
        // "Username": "user", // dotnet user-secrets set "SemanticMemory:Services:RabbitMq:Username" "MY_RABBITMQ_USER"
        // "Password": "", // dotnet user-secrets set "SemanticMemory:Services:RabbitMq:Password" "MY_RABBITMQ_KEY"
        "Host": "127.0.0.1",
        "Port": "5672"
      },
      "AzureCognitiveSearch": {
        // "ApiKey" or "AzureIdentity". For other options see <AzureCognitiveSearchConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ApiKey",
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureCognitiveSearch:APIKey" "MY_ACS_KEY"
        "Endpoint": ""
      },
      "Qdrant": {
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:Qdrant:APIKey" "MY_QDRANT_KEY"
        "Endpoint": "http://127.0.0.1:6333"
      },
      "AzureOpenAIText": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ApiKey",
        "Endpoint": "",
        "Deployment": "gpt-35-turbo",
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureOpenAIText:APIKey" "MY_AZUREOPENAI_KEY"
        // "ChatCompletion" or "TextCompletion"
        "APIType": "ChatCompletion",
        "MaxRetries": 10
      },
      "AzureOpenAIEmbedding": {
        // "ApiKey" or "AzureIdentity"
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "ApiKey",
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureOpenAIEmbedding:APIKey" "MY_AZUREOPENAI_KEY"
        "Endpoint": ".openai.azure.com/",
        "Deployment": "text-embedding-ada-002"

      },
      "OpenAI": {
        "TextModel": "gpt-3.5-turbo",
        "EmbeddingModel": "text-embedding-ada-002",
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:OpenAI:APIKey" "MY_OPENAI_KEY"
        "OrgId": "",
        "MaxRetries": 10
      },
      "AzureFormRecognizer": {
        // "APIKey" or "AzureIdentity". For other options see <AzureBlobConfig>.
        // AzureIdentity: use automatic AAD authentication mechanism. You can test locally
        //   using the env vars AZURE_TENANT_ID, AZURE_CLIENT_ID, AZURE_CLIENT_SECRET.
        "Auth": "APIKey",
        // Required when Auth == APIKey
        // "APIKey": "", // dotnet user-secrets set "SemanticMemory:Services:AzureFormRecognizer:APIKey" "MY_AZUREFORMRECOGNIZER_KEY"
        "Endpoint": ""
      },
      // - When using Tesseract OCR Support (In order to upload image file formats such as png, jpg and tiff)
      //  - Obtain language data files here: https://github.com/tesseract-ocr/tessdata .
      //  - Add these files to your `data` folder or the path specified in the "FilePath" property and set the "Copy to Output Directory" value to "Copy if newer".
      "Tesseract": {
        "Language": "eng",
        "FilePath": "./data"
      }
    }
  },
  // Logging configuration
  "Logging": {
    "LogLevel": {
      "Default": "Information",
      "Microsoft.AspNetCore": "Warning"
    }
  },
  "AllowedHosts": "*"
}